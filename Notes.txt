Complete NodeJS Syallabus
1. Why Node.JS  ✅✅✅
===============================================================================================================
2. What is Node.JS  ✅✅✅
->Node JS is a runtime environment that allows javascript to run outside the browser,built on chrome V8 enigne.
->It uses and event driven,non-blocking I/O model,making it efficient for scalablw applications.
->Ideal for building server-side applications like APIs,real time apps,and microservices.
->Runs on multiple platforms(Windows,linux,MacOS) and uses npm for managing packages.
===============================================================================================================
3. Installation [Node.js, Vs Code]  ✅✅✅
===============================================================================================================
4. Nodemon Installation & Npm Init  ✅✅✅
npm install -g nodemon
npm init -y
===============================================================================================================
5. Modules In Node.js   ✅✅✅
import syntax-> New Technique
require syntax-> Old Technique
===============================================================================================================

6. File Handling In Node.js   ✅✅✅
Syntax to import fs module-> import {} from 'fs/promises'
### **File Handling in Node.js**

1. **Read a File**: 
   - **Keyword**: `readFile()`
   - Purpose: Reads the content of a file asynchronously.

2. **Create a File**: 
   - **Keyword**: `writeFile()`
   - Purpose: Creates a new file or overwrites an existing one with new content.

3. **Append to a File**: 
   - **Keyword**: `appendFile()`
   - Purpose: Adds content to the end of an existing file.

4. **Create a Directory**: 
   - **Keyword**: `mkdir()`
   - Purpose: Creates a new directory. Use `recursive: true` to create nested directories.

These are the core methods for file and directory operations in Node.js.
===============================================================================================================

7. Path Module In Node.js  ✅✅✅
Syntax->import path from "path"
path.join,path.resolve,path.extname

===============================================================================================================

8. Building Server (HTTP Modules In Node.js )  ✅✅✅
import http from "http"
const server=http.createServer();
const PORT=5000;
server.listen(PORT,()=>{
    console.log(`Server is running on PORT ${PORT}`)
})
===============================================================================================================

9. Routing In Node.js  ✅✅✅
Syntax->req.url 

===============================================================================================================

10. Express.JS Introduction & Installation ✅✅✅
Best backend framework for NodeJS.
Syntax->npm i Express

===============================================================================================================

11. Create Server & Routing in Express.JS ✅✅✅
app.listen,app.get(for routing)
===============================================================================================================

12. CRUD Operation In Express.JSON  ✅✅✅
C->create=POST(method)
R->read=GET(method)
U->update=PUT(method)
D->delete=delete(method)
===============================================================================================================

13. Send JSON, HTML, HTML File In Response  ✅✅✅
res.json,res.send,res.sendFile

===============================================================================================================

14. Template Engine (ejs || SSR (Server Side Rendering ))  ✅✅✅
A template engine is a tool used in web development to dynamically generate HTML pages by 
combining static templates with data. It allows developers to embed variables and control 
structures (like loops and conditionals) within HTML, making it easier to create dynamic and 
reusable web pages. Template engines are used to separate the presentation layer from the business 
logic, promoting cleaner code and easier maintenance.

for Ejs we use res.render();
===============================================================================================================

15. Set Static fie In ejs, Express.JS   ✅✅✅
we use middleware to set static file in ejs.

===============================================================================================================

16. Form Handling In Express.JS   ✅✅✅
req.body;

===============================================================================================================

17. MongoDB Atlas Setup  ✅✅✅

===============================================================================================================

18. Connect MongoDB + Express.JS  ✅✅✅
Syntax->npm i mongoose express
===============================================================================================================

19. MVC - Models Views & Controllers In Express.JS  ✅✅✅
MongoDB Database-> User.create(req.body);

 try {
        let user = await User.create(req.body)
        res.json({
            message: "User created successfully.",
            NewUser: user,
            success: true, 
        })
    } catch (error) {
        res.json({message:error.message})
   }
   
===============================================================================================================

20. Project - 1 [URL - Shortener]   ✅✅✅

===============================================================================================================

21. Project -2 [Image Uploader ] - Multer & Cloudinary  ✅✅✅

===============================================================================================================


22. Project - 3 [Full Stack Authentication With File Upload] 
23. What is API ? Sudh Desi Bhasha Mai Explain! 
24. Project - 4 [Contact API With Full Authentication] 
25. API Testing - Postman & ThunderClient 
26. Add MongoDB In API || CRUD Operation In API 
27. User Register & Login API 
28. Bcrypt.JS In API || Hashing The Password 
29. Http Status Code In API 
30. Convert API to MVC 
31. Middleware In API || Add Auth Middleware In API 
32. Deploy API to Render